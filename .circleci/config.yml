version: 2.1
# The EKS cluster was created following the instruction here: https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.html
jobs:
    app-build-and-lint:
      docker:
        - image: python:3.7.3-stretch
      working_directory: ~/repo
      steps:
        - checkout
        # Download and cache dependencies
        - restore_cache:
            keys:
              - v1-dependencies-{{ checksum "requirements.txt" }}
              # fallback to using the latest cache if no exact match is found
              - v1-dependencies-
        - run:
            name: install dependencies
            command: |
              python3 -m venv venv
              . venv/bin/activate
              make install
        - save_cache:
            paths:
              - ./venv
            key: v1-dependencies-{{ checksum "requirements.txt" }}
        - run:
            name: run lint
            command: |
              . venv/bin/activate
              make lint

    docker-build-and-upload:
      docker:
        - image: circleci/golang:1.15
      parameters:
        docker_tag:
          type: string
          default: ${CIRCLE_WORKFLOW_ID}
      steps:
        - checkout
        - setup_remote_docker
        - run:
            name: Build docker image
        # (https://circleci.com/blog/build-cicd-piplines-using-docker/#:~:text=Before%20we%20get%20started%2C%20you%20will%20need%3A%20A,key%20to%20your%20account%20using%20the%20CircleCI%20portal.)
            command: |
              docker build -t $DOCKER_LOGIN/devopsmlapp:docker_tag .
              docker image ls
        - run:
            name: Push docker image
            command: |
              echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
              docker image push $DOCKER_LOGIN/devopsmlapp:docker_tag

    networks-build:
      docker:
        - image: amazon/aws-cli
      parameters: &parameter
        project_id:
          type: string
          default: udacitycapstone
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: yum install -y tar gzip
        - run:
            name: Build the networks(VPC and Subnets etc that meet the EKS requirements)
            command: |
              aws cloudformation deploy \
                --template-file cloudformation/network.yml \
                --tags project=<< parameters.project_id >> \
                --stack-name "<< parameters.project_id >>-networks" \
                --parameter-overrides file://cloudformation/network-parameters.json

    deploy-cluster-and-nodegroups:
      docker:
        - image: amazon/aws-cli
      parameters: *parameter
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: yum install -y tar gzip
        - run:
            name: Create EKS Cluster
            command: |
              aws cloudformation deploy \
                --template-file cloudformation/ekscluster.yml \
                --tags project=<< parameters.project_id >>\
                --stack-name "<< parameters.project_id >>-eks-cluster" \
                --capabilities CAPABILITY_NAMED_IAM
            no_output_timeout: 15m
        - run:
            name: Create Nodegroup exists
            command: |
              aws cloudformation deploy \
                --template-file cloudformation/eksnodegroup.yml \
                --tags project=<< parameters.project_id >> \
                --stack-name "<< parameters.project_id >>-eks-nodegroup" \
                --capabilities CAPABILITY_NAMED_IAM

    deploy-management-server:
      docker:
        - image: amazon/aws-cli
      parameters: *parameter
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: yum install -y tar gzip
        - run:
            name: Create management EC2
            command: |
              aws cloudformation deploy \
                --template-file cloudformation/ec2management.yml \
                --tags project=<< parameters.project_id >> \
                --stack-name "<< parameters.project_id >>-management-instance"

        - run:
            name: Add management ec2 ip to inventory for ansible
            command: |
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filter "Name=tag:Name, Values=<< parameters.project_id >>-management" \
                --output text >> ansible/inventory.txt
              cat ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths: [project/ansible/inventory.txt]

    deploy-k8s-components:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["d4:ef:11:47:7d:97:9f:cb:ff:ce:3c:6d:f2:35:c7:7b"]
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible

        - run:
            name: configure management server - Set up AWS configure and Kubectl updateconfig
            no_output_timeout: 15m
            command: |
              cd ansible
              cat inventory.txt
              ansible-playbook configure-server.yml -i inventory.txt

        - run:
            name: Create your running application pods
            command: |
              cd ansible
              cat inventory.txt
              ansible-playbook deployment.yml -i inventory.txt


    update-docker-app:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["d4:ef:11:47:7d:97:9f:cb:ff:ce:3c:6d:f2:35:c7:7b"]
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              apk add --update ansible

        - run:
            name: deploy newest docker image
            command: |
              cd ansible
              cat inventory.txt
              ansible-playbook update-deployment.yml -i inventory.txt


workflows:
  workflowname:
    jobs:
      - app-build-and-lint
      - networks-build
      - docker-build-and-upload:
          requires: [app-build-and-lint]
      - deploy-cluster-and-nodegroups:
          requires: [networks-build]
      - deploy-management-server:
          requires: [deploy-cluster-and-nodegroups]
      - deploy-k8s-components:
          requires: [docker-build-and-upload, deploy-management-server, deploy-cluster-and-nodegroups]
      - update-docker-app:
          requires: [deploy-k8s-components]
